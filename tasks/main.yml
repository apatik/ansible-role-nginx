
- name: set var nginx user account for Redhat
  set_fact:
    nginx_uid: "nginx"
    nginx_gid: "nginx"
  when: ansible_os_family == "RedHat"

- name: set var nginx user account for Debian
  set_fact:
    nginx_uid: "www-data"
    nginx_gid: "www-data"
  when: ansible_os_family == "Debian"

- name: Copy the nginx repo (RedHat / CentOS)
  copy: src=nginx.repo dest=/etc/yum.repos.d/nginx.repo
  when: ansible_os_family == "RedHat" and (nginx_install_repo is defined and nginx_install_repo|lower == "true")

- name: Copy the nginx repo (Debian / Ubuntu)
  template: src=nginx.list.j2 dest=/etc/apt/sources.list.d/nginx.list
  when: ansible_os_family == "Debian" and (nginx_install_repo is defined and nginx_install_repo|lower == "true")

- name: Install the nginx package
  package: name=nginx state=present

- name: Install the certbot packages
  apt: name=certbot state=present update_cache=yes default_release=jessie-backports
  environment: '{{ env }}'
  when: ansible_os_family == "Debian" and (nginx_use_letsencrypt is defined and nginx_use_letsencrypt|lower == "true")

- name: Install the certbot packages
  yum: name=certbot state=present
  when: ansible_os_family == "RedHat" and (nginx_use_letsencrypt is defined and nginx_use_letsencrypt|lower == "true")

- name: Create the directories for site specific configurations and ssl keys
  file: path=/etc/nginx/{{ item }} state=directory owner=root group=root mode=0755
  with_items:
    - "sites-available"
    - "sites-enabled"
    - "ssl"

- name: Check if /etc/nginx/nginx.conf exists
  stat: path=/etc/nginx/nginx.conf
  register: nginx_conf_exists

- name: Copy the nginx configuration file
  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf
  when: (nginx_create_nginx_conf is defined and nginx_create_nginx_conf|lower == "true") or nginx_conf_exists is not defined
  notify:
   - restart nginx

- name: create directory /srv/www/letsencrypt/
  file: path=/srv/www/letsencrypt/{{item.file_name}} state=directory
  with_items:
    - "{{ nginx_sites }}"
  when: nginx_use_letsencrypt is defined and nginx_use_letsencrypt|lower == "true"

- name: Delete the links to delete site configurations for letsencrypt
  file: path=/etc/nginx/sites-enabled/{{ item.file_name }} state=absent src=/etc/nginx/sites-available/{{ item.file_name }}
  with_items: "{{nginx_sites}}"
  when:
    - item.ssl is defined
    - item.ssl != None
    - item.ssl.supplier == "letsencrypt"
    - nginx_manage_letsencrypt

- name: Create the configurations for sites
  template: src=site_letsencrypt.j2 dest=/etc/nginx/sites-available/{{ item.file_name }}
  with_items:
    - "{{nginx_sites}}"
  when:
    - item.ssl is defined
    - item.ssl != None
    - item.ssl.supplier == "letsencrypt"
    - nginx_manage_letsencrypt

- name: Create the links to enable site configurations for letsencrypt
  file: path=/etc/nginx/sites-enabled/{{ item.file_name }} state=link src=/etc/nginx/sites-available/{{ item.file_name }}
  with_items:
    - "{{nginx_sites}}"
  when:
    - item.ssl is defined
    - item.ssl != None
    - item.ssl.supplier == "letsencrypt"
    - nginx_manage_letsencrypt

- name: reload nginx
  service: name=nginx state=reloaded
  with_items:
    - "{{nginx_sites}}"
  when:
    - item.ssl is defined
    - item.ssl != None
    - item.ssl.supplier == "letsencrypt"

- name: configure certbot webroot plugin
  command: certbot certonly -n --expand --webroot -w "/srv/www/letsencrypt/{{item.file_name}}" -d "{{item.ssl.domains|join(',')}}" --cert-name "{{ item.file_name }}"
  with_items:
    - "{{nginx_sites}}"
  when:
    - item.ssl is defined
    - item.ssl != None
    - item.ssl.supplier == "letsencrypt"
    - nginx_manage_letsencrypt

- name: Copy SSL keys
  copy: src={{ item.ssl.local_keystore_dir }}/{{item.ssl.key }} dest={{ nginx_ssl_dir }}/{{ item.ssl.key }}  owner={{ nginx_uid }} group={{ nginx_gid }} mode=400 backup=no
  with_items:
    - "{{nginx_sites }}"
  when:
    - item.ssl is defined
    - item.ssl != None
    - item.ssl.key is defined
    - item.ssl.key != None
    - item.ssl.supplier == "local"

- name: Copy SSL certificates
  copy: src={{ item.ssl.local_keystore_dir }}/{{item.ssl.certificate }} dest={{ nginx_ssl_dir }}/{{ item.ssl.certificate }}  owner={{ nginx_uid }} group={{ nginx_gid }} mode=644 backup=no
  with_items:
    - "{{nginx_sites }}"
  when:
    - item.ssl is defined
    - item.ssl != None
    - item.ssl.certificate is defined
    - item.ssl.certificate != None
    - item.ssl.supplier == "local"

- name: Copy the nginx default configuration file
  template: src=default.conf.j2 dest=/etc/nginx/conf.d/default.conf

- name: Copy the nginx default site configuration file
  template: src=default.j2 dest=/etc/nginx/sites-available/default

- name: Create the link for site enabled specific configurations
  file: path=/etc/nginx/sites-enabled/default state=link src=/etc/nginx/sites-available/default

- name: Create Mail Proxy configuration
  template: src=mail.conf.j2 dest=/etc/nginx/mail.conf
  when: nginx_mail_params is defined and nginx_mail_servers is defined
  notify:
    - reload nginx

- name: Create the configurations for sites
  template: src=site.j2 dest=/etc/nginx/sites-available/{{ item.file_name }}
  with_items: "{{nginx_sites}}"

- name: Create the configuration for upstreams
  template: src=upstream.j2 dest=/etc/nginx/conf.d/upstream-{{ item.name }}.conf
  with_items: "{{nginx_upstreams}}"

- name: Create the links to enable site configurations
  file: path=/etc/nginx/sites-enabled/{{ item.file_name }} state=link src=/etc/nginx/sites-available/{{ item.file_name }}
  with_items: "{{nginx_sites}}"
  notify:
   - reload nginx

- name: start the nginx service
  service: name=nginx state=started enabled=yes

- name: Add cronjob for letsencrypt bot
  cron: name="Update letsencrypt certs" minute="15" hour="3" job="/usr/bin/certbot renew --quiet --renew-hook \"/usr/sbin/service nginx reload\""
  when: nginx_use_letsencrypt is defined and nginx_use_letsencrypt|lower == "true" and nginx_manage_letsencrypt
